from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel, Field
import os
import re
from datetime import datetime
from dotenv import load_dotenv
import google.generativeai as genai
from cache_fallback_system import cache_fallback

# Charger les variables d'environnement
load_dotenv()

# Configuration
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
if GEMINI_API_KEY:
    genai.configure(api_key=GEMINI_API_KEY)
    print("‚úÖ Gemini configured with personal key (GRATUIT)")
    GEMINI_AVAILABLE = True
else:
    print("‚ùå No personal Gemini key available")
    GEMINI_AVAILABLE = False

app = FastAPI(title="Bible Study API", version="1.0.0")

# CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Mod√®les
class VerseByVerseRequest(BaseModel):
    passage: str = Field(..., description="Ex: 'Gen√®se 1' ou 'Gen√®se 1:1'")
    version: str = Field("LSG", description="Version biblique")
    tokens: int = Field(500, description="Longueur cible")
    use_gemini: bool = Field(True, description="Utiliser Gemini")
    enriched: bool = Field(True, description="Contenu enrichi")
    rubric_type: str = Field("verse_by_verse", description="Type de rubrique")

class StudyRequest(BaseModel):
    passage: str = Field(..., description="Ex: 'Gen√®se 1' ou 'Jean 3:16'")
    version: str = Field("LSG", description="Version biblique")  
    tokens: int = Field(1000, description="Longueur cible par rubrique")
    selected_rubriques: list = Field(None, description="Liste des rubriques √† g√©n√©rer (optionnel)")
    use_gemini: bool = Field(True, description="Utiliser Gemini")

# Fonction Gemini avec gestion d'erreur am√©lior√©e
async def generate_with_gemini_raw(prompt: str) -> str:
    """Fonction Gemini brute pour utilisation interne"""
    if not GEMINI_AVAILABLE:
        raise Exception("Gemini non disponible - cl√© API manquante")
    
    try:
        model = genai.GenerativeModel('gemini-2.0-flash-exp')
        response = model.generate_content(prompt)
        
        if response and response.text:
            print(f"‚úÖ Content generated with personal Gemini (GRATUIT): {len(response.text)} chars")
            return response.text.strip()
        else:
            raise Exception("Gemini n'a pas retourn√© de contenu")
            
    except Exception as e:
        # Log l'erreur compl√®te pour debugging
        error_msg = str(e)
        print(f"‚ùå Erreur Gemini: {error_msg}")
        
        # V√©rifier si c'est une erreur de quota
        if "429" in error_msg or "quota" in error_msg.lower() or "exceeded" in error_msg.lower():
            raise Exception(f"QUOTA_EXCEEDED: {error_msg}")
        else:
            raise Exception(f"GEMINI_ERROR: {error_msg}")

# Nouvelle fonction principale avec cache et fallback
async def generate_with_smart_fallback(passage: str, tokens: int, use_gemini: bool, prompt: str) -> tuple:
    """
    G√©n√©ration intelligente avec cache et fallback
    Retourne: (content, source, from_cache, error_message)
    """
    
    async def gemini_generator():
        return await generate_with_gemini_raw(prompt)
    
    try:
        content, source, from_cache = await cache_fallback.get_cached_or_generate(
            passage=passage,
            tokens=tokens,
            use_gemini=use_gemini,
            gemini_generator_func=gemini_generator
        )
        
        return content, source, from_cache, None
        
    except Exception as e:
        error_msg = f"Erreur syst√®me: {str(e)}"
        print(f"üí• Erreur dans generate_with_smart_fallback: {error_msg}")
        
        # En dernier recours, g√©n√©rer du contenu de fallback local
        fallback_content = await cache_fallback.generate_fallback_content(passage, tokens)
        return fallback_content, "Fallback d'urgence", False, error_msg

# Routes
@app.get("/")
async def root():
    return {"message": "Bible Study API avec cl√© Gemini personnelle GRATUITE"}

@app.get("/api/health")
async def health_check():
    try:
        # V√©rifier le syst√®me de rotation Gemini
        quota_ok, quota_message = cache_fallback._check_gemini_quota()
        
        return {
            "status": "ok",
            "rotation_system": "Syst√®me de rotation activ√©",
            "gemini_keys": [
                f"{key['name']}: {'‚úÖ Disponible' if not key.get('failed', False) else '‚ùå Quota d√©pass√©'}" 
                for key in cache_fallback.gemini_keys
            ],
            "current_key": cache_fallback.gemini_keys[cache_fallback.quota_tracker.get("current_key_index", 0)]["name"],
            "bible_api_configured": True,
            "cache_entries": len(cache_fallback.cache),
            "message": "√âtudes garanties sans interruption gr√¢ce √† la rotation automatique",
            "features": [
                "üîë Rotation automatique Gemini Keys",
                "üìñ Bible API fallback",
                "üìã Cache intelligent (24h)",
                "‚ôªÔ∏è Reset quotidien automatique"
            ]
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Erreur syst√®me: {str(e)}")

@app.get("/api/api-status")
async def get_api_status():
    """
    Endpoint pour obtenir le statut en temps r√©el de toutes les API
    Utilis√© par le panneau de contr√¥le frontend
    """
    try:
        status = cache_fallback.get_api_status()
        return status
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Erreur r√©cup√©ration statut: {str(e)}")

@app.get("/api/api-history")
async def get_api_history():
    """
    Endpoint pour obtenir l'historique d√©taill√© des appels API
    """
    try:
        history = getattr(cache_fallback, "call_history", [])
        return {
            "timestamp": datetime.now().isoformat(),
            "total_calls": len(history),
            "history": history[-20:]  # Les 20 derniers appels
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Erreur r√©cup√©ration historique: {str(e)}")

@app.post("/api/generate-study")
async def generate_study(request: StudyRequest):
    """
    G√©n√®re une √©tude biblique en 28 rubriques avec Gemini intelligent
    """
    try:
        print(f"[GENERATE STUDY] Requ√™te re√ßue: {request.passage}")
        
        # Liste des rubriques SYNCHRONIS√âE avec le frontend (BASE_RUBRIQUES)
        rubriques_list = [
            "√âtude verset par verset",
            "Pri√®re d'ouverture",
            "Structure litt√©raire", 
            "Questions du chapitre pr√©c√©dent",
            "Th√®me doctrinal",
            "Fondements th√©ologiques",
            "Contexte historique",
            "Contexte culturel", 
            "Contexte g√©ographique",
            "Analyse lexicale",
            "Parall√®les bibliques",
            "Proph√©tie et accomplissement",
            "Personnages",
            "Structure rh√©torique",
            "Th√©ologie trinitaire",
            "Christ au centre",
            "√âvangile et gr√¢ce",
            "Application personnelle", 
            "Application communautaire",
            "Pri√®re de r√©ponse",
            "Questions d'√©tude",
            "Points de vigilance",
            "Objections et r√©ponses",
            "Perspective missionnelle",
            "√âthique chr√©tienne", 
            "Louange / liturgie",
            "M√©ditation guid√©e",
            "M√©moire / versets cl√©s",
            "Plan d'action"
        ]
        
        # D√©terminer quelles rubriques g√©n√©rer
        rubriques_to_generate = request.selected_rubriques if request.selected_rubriques else list(range(len(rubriques_list)))
        
        # Utiliser notre syst√®me de rotation Gemini avec prompt sp√©cifique aux rubriques
        if request.use_gemini:
            # Cr√©er un prompt sp√©cifique pour les rubriques (pas les versets)
            rubriques_to_generate = request.selected_rubriques if request.selected_rubriques else [0, 1, 2, 3, 4]
            rubriques_names = []
            
            for idx, i in enumerate(rubriques_to_generate[:5]):
                if i < len(rubriques_list):
                    # Pour les rubriques √† partir de l'index 1, utiliser i (pas i+1) car l'index correspond d√©j√† au num√©ro affich√©
                    # Index 0 = "√âtude verset par verset" (pas num√©rot√©), Index 1 = "Rubrique 1", etc.
                    if i == 0:
                        rubriques_names.append(f"√âtude verset par verset: {rubriques_list[i]}")
                    else:
                        rubriques_names.append(f"Rubrique {i}: {rubriques_list[i]}")
            
            # Construire le prompt de mani√®re explicite pour chaque rubrique demand√©e
            prompt_parts = []
            prompt_parts.append(f"Cr√©ez une √©tude biblique th√©ologique pour le passage {request.passage}.")
            prompt_parts.append("")
            
            # Instructions sp√©cifiques pour chaque rubrique
            for i in rubriques_to_generate[:5]:
                if i < len(rubriques_list):
                    if i == 0:
                        rubrique_title = f"√âtude verset par verset: {rubriques_list[i]}"
                    else:
                        rubrique_title = f"Rubrique {i}: {rubriques_list[i]}"
                    
                    prompt_parts.append(f"G√©n√©rez du contenu substantiel pour :")
                    prompt_parts.append(f"## {rubrique_title}")
                    prompt_parts.append(f"Adaptez sp√©cifiquement au passage {request.passage}.")
                    prompt_parts.append("")
            
            prompt_parts.extend([
                "INSTRUCTIONS CRITIQUES :",
                "1. Utilisez EXACTEMENT les titres de rubriques indiqu√©s ci-dessus",
                "2. Contenu unique et sp√©cifique au passage biblique",
                "3. Langage th√©ologique √©rudit et pr√©cis", 
                "4. 150-200 mots par rubrique minimum",
                "5. AUCUN contenu g√©n√©rique type 'sera g√©n√©r√© automatiquement'",
                "",
                "IMPORTANT : Respectez EXACTEMENT la num√©rotation des rubriques demand√©es !"
            ])
            
            prompt = "\n".join(prompt_parts)
            
            # Essayer avec notre syst√®me de rotation Gemini
            try:
                gemini_content, gemini_source, success = await cache_fallback._try_gemini_with_rotation(prompt)
                
                if success and gemini_content:
                    # V√©rifier que le contenu ne contient pas de format "VERSET"
                    if "**VERSET" not in gemini_content.upper():
                        print(f"‚úÖ √âtude 28 points g√©n√©r√©e avec {gemini_source}")
                        
                        # Corriger la num√©rotation des rubriques apr√®s g√©n√©ration
                        corrected_content = gemini_content
                        
                        # Si on a demand√© une rubrique sp√©cifique, corriger sa num√©rotation
                        if len(rubriques_to_generate) == 1:
                            requested_index = rubriques_to_generate[0]
                            if requested_index > 0:  # Pas pour l'√©tude verset par verset (index 0)
                                # Remplacer "Rubrique X:" par "Rubrique [correct_number]:" 
                                import re
                                pattern = r"## Rubrique \d+:"
                                replacement = f"## Rubrique {requested_index}:"
                                corrected_content = re.sub(pattern, replacement, corrected_content)
                                print(f"[CORRECTION] Num√©rotation corrig√©e pour Rubrique {requested_index}")
                        
                        return {
                            "content": corrected_content,
                            "passage": request.passage,
                            "version": request.version,
                            "source": gemini_source,
                            "rubriques_generated": len(rubriques_to_generate),
                            "from_cache": False
                        }
                    else:
                        print(f"‚ö†Ô∏è Contenu format verset d√©tect√©, r√©g√©n√©ration...")
                        
            except Exception as e:
                print(f"‚ùå Erreur rotation Gemini: {e}")
        
        # Si toutes les cl√©s Gemini √©chouent, attendre 1 minute puis retenter
        retry_count = 0
        max_retries = 3
        
        while retry_count < max_retries:
            retry_count += 1
            print(f"üîÑ Tentative {retry_count}/{max_retries} - Attente 60 secondes avant retry...")
            
            # Attendre 1 minute (en production) ou 5 secondes (en dev)
            import asyncio
            await asyncio.sleep(5)  # 5 secondes pour les tests, changer √† 60 en production
            
            # Reset des cl√©s et nouvelle tentative
            for key_info in cache_fallback.gemini_keys:
                key_info["failed"] = False
            cache_fallback.quota_tracker["current_key_index"] = 0
            
            print(f"üîÑ Retry {retry_count}: Reset des cl√©s Gemini et nouvelle tentative")
            
            try:
                gemini_content, gemini_source, success = await cache_fallback._try_gemini_with_rotation(prompt)
                if success and gemini_content:
                    print(f"‚úÖ Retry {retry_count} r√©ussi avec {gemini_source}")
                    # Appliquer la correction de num√©rotation si n√©cessaire
                    corrected_content = gemini_content
                    if len(rubriques_to_generate) == 1:
                        requested_index = rubriques_to_generate[0]
                        if requested_index > 0:
                            pattern = r"## Rubrique \d+:"
                            replacement = f"## Rubrique {requested_index}:"
                            corrected_content = re.sub(pattern, replacement, corrected_content)
                    return {"content": corrected_content}
            except Exception as retry_error:
                print(f"‚ùå Retry {retry_count} √©chou√©: {retry_error}")
        
        print(f"üö´ Tous les retries Gemini ont √©chou√©, utilisation Bible API th√©ologique")
        
        # En dernier recours, utiliser la Bible API pour du contenu th√©ologique authentique
        print(f"üîÑ Bible API Th√©ologique - G√©n√©ration authentique")
        
        theological_content = []
        for i in rubriques_to_generate[:5]:  # Limiter √† 5 pour commencer
            rubrique_title = rubriques_list[i]
            
            try:
                # G√©n√©rer du vrai contenu th√©ologique avec la Bible API
                content = await cache_fallback.generate_theological_content_with_bible_api(
                    request.passage, rubrique_title, i
                )
                
                # Formater avec le bon en-t√™te
                if i == 0:
                    header = f"## √âtude verset par verset: {rubrique_title}"
                else:
                    header = f"## Rubrique {i}: {rubrique_title}"
                
                theological_content.append(f"{header}\n\n{content}")
                print(f"üìñ Bible API Th√©ologique: {rubrique_title} g√©n√©r√©e ({len(content)} chars)")
                
            except Exception as e:
                print(f"‚ùå Erreur Bible API Th√©ologique pour {rubrique_title}: {e}")
                # En dernier recours seulement, message d'erreur explicite
                if i == 0:
                    header = f"## √âtude verset par verset: {rubrique_title}"
                else:
                    header = f"## Rubrique {i}: {rubrique_title}"
                
                theological_content.append(f"""
{header}

‚ö†Ô∏è Toutes les API sont temporairement indisponibles. Nouvelle tentative dans 1 minute.
La g√©n√©ration th√©ologique pour "{rubrique_title}" sera disponible sous peu.
                """.strip())
        
        fallback_text = "\n\n".join(theological_content)
        
        return {
            "content": fallback_text,
            "passage": request.passage,
            "version": request.version,
            "source": "Fallback th√©ologique intelligent",
            "rubriques_generated": len(rubriques_to_generate[:5]),
            "from_cache": False
        }
        
    except Exception as e:
        print(f"‚ùå Erreur generate_study: {str(e)}")
        raise HTTPException(status_code=500, detail=f"Erreur g√©n√©ration √©tude: {str(e)}")

@app.post("/api/generate-verse-by-verse")
async def generate_verse_by_verse(request: VerseByVerseRequest):
    try:
        # Prompt adapt√© selon le type de rubrique
        if request.rubric_type == "verse_by_verse":
            # Prompt pour verset par verset (rubrique 0) - FORMAT EXACT POUR CSS
            prompt = f"""
Tu es un expert biblique. L'utilisateur a s√©lectionn√© "{request.passage}" version {request.version}.

G√âN√àRE MAINTENANT une √©tude verset par verset pour cette s√©lection utilisateur.

INSTRUCTIONS PR√âCISES :
- Si c'est un chapitre (ex: "Gen√®se 1") : g√©n√®re EXACTEMENT LES 5 PREMIERS VERSETS de ce chapitre
- Si c'est un verset sp√©cifique (ex: "Jean 3:16") : g√©n√®re ce verset pr√©cis ET les 4 versets suivants (total 5)
- Si c'est une plage (ex: "Matthieu 5:1-10") : g√©n√®re les 5 premiers versets de cette plage

PASSAGE S√âLECTIONN√â : {request.passage}
VERSION : {request.version}

FORMAT EXACT OBLIGATOIRE (respecter pr√©cis√©ment) :

**VERSET [num√©ro]**

**TEXTE BIBLIQUE :**
[texte exact du verset en version {request.version}]

**EXPLICATION TH√âOLOGIQUE :**
[analyse th√©ologique approfondie de 120-180 mots]

R√àGLES STRICTES :
- G√âN√àRE EXACTEMENT 5 VERSETS (ni plus, ni moins)
- G√âN√àRE DIRECTEMENT le contenu (pas de questions √† l'utilisateur)
- Format EXACT : "**VERSET [num√©ro]**", "**TEXTE BIBLIQUE :**", "**EXPLICATION TH√âOLOGIQUE :**"
- Texte biblique pr√©cis en version {request.version}
- Explications th√©ologiques substantielles et pertinentes
- Commence IMM√âDIATEMENT par le contenu demand√©

COMMENCE MAINTENANT LA G√âN√âRATION pour "{request.passage}" - G√âN√àRE EXACTEMENT 5 VERSETS :
"""
        else:
            # Prompt pour enrichissement de rubriques (1-28)
            prompt = f"""
G√©n√®re un contenu th√©ologique enrichi pour la rubrique "{request.rubric_type}" sur le passage {request.passage}.

Instructions :
- Fournis une analyse th√©ologique approfondie
- Longueur cible : {request.tokens} caract√®res environ
- Contenu sp√©cifique √† cette rubrique et ce passage
- Style acad√©mique mais accessible
- Inclus des r√©f√©rences bibliques pertinentes

Rubrique : {request.rubric_type}
Passage : {request.passage}
"""
        
        # G√©n√©rer avec syst√®me intelligent (cache + fallback)
        content, source, from_cache, error_msg = await generate_with_smart_fallback(
            passage=request.passage,
            tokens=request.tokens,
            use_gemini=request.use_gemini and GEMINI_AVAILABLE,
            prompt=prompt
        )
        
        # Pr√©parer la r√©ponse avec informations d√©taill√©es
        response_data = {
            "content": content,
            "passage": request.passage,
            "version": request.version,
            "tokens": len(content),
            "gemini_used": request.use_gemini and GEMINI_AVAILABLE,
            "rubric_type": request.rubric_type,
            "cost": "GRATUIT - Cache" if from_cache else ("GRATUIT - Votre cl√© Gemini personnelle" if source.startswith("Gemini") else "GRATUIT - Fallback intelligent"),
            "source": source,
            "from_cache": from_cache
        }
        
        # Ajouter l'erreur si pr√©sente (pour debug)
        if error_msg:
            response_data["debug_info"] = error_msg
        
        return response_data
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Erreur g√©n√©ration: {str(e)}")

@app.post("/api/clear-cache")
async def clear_cache():
    """Endpoint pour vider le cache (utile pour les tests)"""
    cache_size = len(cache_fallback.cache)
    cache_fallback.cache.clear()
    
    return {
        "message": f"Cache cleared ({cache_size} entries removed)",
        "status": "success"
    }

@app.get("/api/cache-stats")
async def cache_stats():
    """Statistiques du cache et du syst√®me de fallback"""
    import time
    
    quota_ok, quota_msg = cache_fallback._check_gemini_quota()
    
    # Analyser le cache
    cache_info = []
    for key, entry in cache_fallback.cache.items():
        cache_info.append({
            "key": key[:16] + "...",  # Masquer la cl√© compl√®te
            "source": entry.get("source", "unknown"),
            "content_length": len(entry.get("content", "")),
            "age_hours": round((time.time() - entry.get("timestamp", 0)) / 3600, 2)
        })
    
    return {
        "quota_status": quota_msg,
        "quota_available": quota_ok,
        "quota_used_today": cache_fallback.quota_tracker.get("gemini_calls_today", 0),
        "cache_entries": len(cache_fallback.cache),
        "cache_details": cache_info[:10],  # Limiter √† 10 entr√©es pour l'affichage
        "bible_api_configured": bool(cache_fallback.bible_api_key),
        "system_status": "operational"
    }

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8001)
