#!/usr/bin/env python3
"""
Syst√®me de Cache et Fallback Intelligent pour l'API Bible Study
- Cache des requ√™tes pour √©viter les appels r√©p√©t√©s
- Syst√®me de fallback automatique vers l'API Bible
- Gestion intelligente des quotas et erreurs
"""

import json
import hashlib
import time
import os
import requests
import asyncio
from typing import Dict, Optional, Tuple
from datetime import datetime, timedelta
from dotenv import load_dotenv

# Charger les variables d'environnement
load_dotenv()

class CacheFallbackSystem:
    def __init__(self):
        # Configuration des APIs avec rotation automatique
        self.bible_api_key = os.getenv("BIBLE_API_KEY")
        self.bible_id = os.getenv("BIBLE_ID", "a93a92589195411f-01")
        
        # Configuration rotation Gemini Keys (ordre exact utilisateur)
        self.gemini_keys = [
            {
                "key": os.getenv("GEMINI_API_KEY_2"),  # PREMIER
                "name": "Gemini Key 2 (Primary)",
                "failed": False
            },
            {
                "key": os.getenv("GEMINI_API_KEY"),   # DEUXI√àME  
                "name": "Gemini Key 1 (Secondary)",
                "failed": False
            },
            {
                "key": os.getenv("GEMINI_API_KEY_3"),  # TROISI√àME
                "name": "Gemini Key 3 (Tertiary)",
                "failed": False
            },
            {
                "key": os.getenv("GEMINI_API_KEY_4"),  # QUATRI√àME
                "name": "Gemini Key 4 (Quaternary)",
                "failed": False
            }
        ]
        
        # Cache en m√©moire (en production, utiliser Redis ou base de donn√©es)
        self.cache = {}
        self.cache_ttl = 3600 * 24  # 24 heures
        
        # Compteurs de quota par cl√©
        self.quota_tracker = {
            "reset_date": datetime.now().date().isoformat(),
            "current_key_index": 0  # Index de la cl√© actuellement utilis√©e
        }
        
        print("‚úÖ Cache & Fallback System initialized with KEY ROTATION")
        print(f"üìç Primary Gemini Key: {self.gemini_keys[0]['name']}")
        print(f"üìç Secondary Gemini Key: {self.gemini_keys[1]['name']}")
        print(f"üìç Bible API fallback configured")
    
    def _get_cache_key(self, passage: str, tokens: int, use_gemini: bool) -> str:
        """G√©n√©rer une cl√© de cache unique pour la requ√™te"""
        data = f"{passage}_{tokens}_{use_gemini}"
        return hashlib.md5(data.encode()).hexdigest()
    
    def _is_cache_valid(self, cache_entry: Dict) -> bool:
        """V√©rifier si l'entr√©e de cache est encore valide"""
        if not cache_entry:
            return False
        
        cache_time = cache_entry.get("timestamp", 0)
        return (time.time() - cache_time) < self.cache_ttl
    
    def _get_next_gemini_key(self) -> tuple:
        """
        R√©cup√©rer la prochaine cl√© Gemini disponible selon l'ordre utilisateur
        Retourne: (key, key_name, key_index) ou (None, None, -1) si toutes √©chou√©es
        """
        
        # V√©rifier si c'est un nouveau jour (reset des √©checs)
        today = datetime.now().date().isoformat()
        if self.quota_tracker["reset_date"] != today:
            print("üîÑ Nouveau jour - Reset des √©checs de cl√©s")
            self.quota_tracker = {
                "reset_date": today,
                "current_key_index": 0
            }
            # Reset des √©checs
            for key_info in self.gemini_keys:
                key_info["failed"] = False
        
        # Essayer les cl√©s dans l'ordre (en commen√ßant par l'index actuel)
        for i in range(len(self.gemini_keys)):
            key_index = (self.quota_tracker["current_key_index"] + i) % len(self.gemini_keys)
            key_info = self.gemini_keys[key_index]
            
            if not key_info["failed"] and key_info["key"]:
                print(f"üîë S√©lection cl√©: {key_info['name']} (Index {key_index})")
                return key_info["key"], key_info["name"], key_index
        
        print("‚ùå Toutes les cl√©s Gemini ont √©chou√©")
        return None, None, -1
    
    def _mark_key_failed(self, key_index: int):
        """Marquer une cl√© comme ayant √©chou√© et passer √† la suivante"""
        if 0 <= key_index < len(self.gemini_keys):
            self.gemini_keys[key_index]["failed"] = True
            print(f"üö´ Cl√© {self.gemini_keys[key_index]['name']} marqu√©e comme √©chou√©e")
            
            # Passer √† la cl√© suivante pour les prochains essais
            self.quota_tracker["current_key_index"] = (key_index + 1) % len(self.gemini_keys)
            print(f"üîÑ Rotation vers index {self.quota_tracker['current_key_index']}")
    
    async def _try_gemini_with_rotation(self, prompt: str) -> tuple:
        """
        Essayer Gemini avec rotation automatique des cl√©s
        Retourne: (content, source, success)
        """
        
        gemini_key, key_name, key_index = self._get_next_gemini_key()
        
        if not gemini_key:
            return None, "Toutes les cl√©s Gemini √©puis√©es", False
        
        try:
            print(f"ü§ñ Tentative Gemini avec {key_name}")
            
            # Configurer temporairement cette cl√©
            import google.generativeai as genai
            genai.configure(api_key=gemini_key)
            
            model = genai.GenerativeModel('gemini-2.0-flash-exp')
            response = model.generate_content(prompt)
            
            if response and response.text:
                content = response.text.strip()
                print(f"‚úÖ Succ√®s avec {key_name}: {len(content)} caract√®res")
                
                # Enregistrer le succ√®s
                self.log_api_call(key_name, True, len(content))
                
                return content, f"{key_name} (GRATUIT)", True
            else:
                print(f"‚ö†Ô∏è R√©ponse vide avec {key_name}")
                self._mark_key_failed(key_index)
                
                # Enregistrer l'√©chec
                self.log_api_call(key_name, False, 0, "R√©ponse vide")
                
                return None, f"{key_name} - r√©ponse vide", False
                
        except Exception as e:
            error_msg = str(e)
            print(f"‚ùå Erreur avec {key_name}: {error_msg}")
            
            # V√©rifier si c'est une erreur de quota
            if "429" in error_msg or "quota" in error_msg.lower() or "exceeded" in error_msg.lower():
                print(f"üö´ Quota d√©pass√© pour {key_name} - rotation automatique")
                self._mark_key_failed(key_index)
                
                # Enregistrer l'√©chec de quota
                self.log_api_call(key_name, False, 0, f"Quota d√©pass√©: {error_msg}")
                
                # Essayer automatiquement la cl√© suivante
                next_key, next_name, next_index = self._get_next_gemini_key()
                if next_key:
                    print(f"üîÑ Tentative automatique avec {next_name}")
                    return await self._try_gemini_with_rotation(prompt)
                else:
                    return None, "Tous quotas Gemini √©puis√©s", False
            else:
                # Erreur non-quota, ne pas marquer comme √©chou√©e
                # Enregistrer l'erreur
                self.log_api_call(key_name, False, 0, f"Erreur: {error_msg}")
                
                return None, f"{key_name} - erreur: {error_msg}", False
    
    async def get_biblical_text_fallback(self, passage: str) -> Dict:
        """
        Fallback vers l'API Bible pour r√©cup√©rer le texte biblique authentique
        Utilise l'API Bible.com avec les cl√©s configur√©es
        """
        try:
            print(f"[BIBLE API] Tentative r√©cup√©ration du texte pour: {passage}")
            
            if not self.bible_api_key:
                print("[BIBLE API] Cl√© API manquante")
                return {"error": "Bible API key not configured"}
            
            # Parser le passage pour d√©tecter les plages
            book, chapter, start_verse, end_verse = self._parse_passage(passage)
            
            print(f"[BIBLE API] Parsed: {book} ch.{chapter}, versets {start_verse}-{end_verse}")
            
            # Mapping des livres fran√ßais vers l'API Bible
            book_mapping = {
                "Gen√®se": "GEN", "Exode": "EXO", "L√©vitique": "LEV", "Nombres": "NUM",
                "Deut√©ronome": "DEU", "Josu√©": "JOS", "Juges": "JDG", "Ruth": "RUT",
                "1 Samuel": "1SA", "2 Samuel": "2SA", "1 Rois": "1KI", "2 Rois": "2KI",
                "Matthieu": "MAT", "Marc": "MRK", "Luc": "LUK", "Jean": "JHN",
                "Actes": "ACT", "Romains": "ROM", "1 Corinthiens": "1CO", "2 Corinthiens": "2CO",
                "Galates": "GAL", "√âph√©siens": "EPH", "Philippiens": "PHP", "Colossiens": "COL"
            }
            
            book_code = book_mapping.get(book, "GEN")
            
            # Essayer l'API Scripture Bible.com
            headers = {
                "api-key": self.bible_api_key
            }
            
            biblical_content = []
            
            # D√©terminer les versets √† r√©cup√©rer
            if start_verse and end_verse:
                verses_to_fetch = list(range(start_verse, end_verse + 1))
            else:
                # Passage g√©n√©ral, prendre les premiers versets
                verses_to_fetch = list(range(1, 6))  # 1-5
            
            # Limiter √† 5 versets maximum
            verses_to_fetch = verses_to_fetch[:5]
            
            print(f"[BIBLE API] R√©cup√©ration versets {verses_to_fetch}")
            
            for i, actual_verse_number in enumerate(verses_to_fetch, 1):
                verse_id = f"{book_code}.{chapter}.{actual_verse_number}"
                url = f"https://api.scripture.api.bible/v1/bibles/{self.bible_id}/verses/{verse_id}"
                
                try:
                    response = requests.get(url, headers=headers, timeout=10)
                    
                    if response.status_code == 200:
                        verse_data = response.json()
                        verse_content = verse_data.get("data", {}).get("content", "")
                        
                        # Nettoyer le contenu HTML
                        import re
                        clean_text = re.sub(r'<[^>]+>', '', verse_content).strip()
                        
                        if clean_text:
                            print(f"[BIBLE API] ‚úÖ Verset {actual_verse_number}: {clean_text[:50]}...")
                            biblical_content.append({
                                "verse_number": i,
                                "text": clean_text,
                                "reference": f"{book} {chapter}:{actual_verse_number}",
                                "actual_verse": actual_verse_number
                            })
                        else:
                            # Si pas de texte, utiliser le texte connu
                            fallback_text = await self._get_known_verse_text(book, chapter, actual_verse_number)
                            biblical_content.append({
                                "verse_number": i,
                                "text": fallback_text,
                                "reference": f"{book} {chapter}:{actual_verse_number}",
                                "actual_verse": actual_verse_number
                            })
                    else:
                        print(f"[BIBLE API] ‚ùå Erreur verset {actual_verse_number}: HTTP {response.status_code}")
                        # Utiliser le texte connu comme fallback
                        fallback_text = await self._get_known_verse_text(book, chapter, actual_verse_number)
                        biblical_content.append({
                            "verse_number": i,
                            "text": fallback_text,
                            "reference": f"{book} {chapter}:{actual_verse_number}",
                            "actual_verse": actual_verse_number
                        })
                        
                except requests.exceptions.RequestException as e:
                    print(f"[BIBLE API] ‚ùå Erreur r√©seau verset {actual_verse_number}: {e}")
                    # Utiliser le texte connu comme fallback
                    fallback_text = await self._get_known_verse_text(book, chapter, actual_verse_number)
                    biblical_content.append({
                        "verse_number": i,
                        "text": fallback_text,
                        "reference": f"{book} {chapter}:{actual_verse_number}",
                        "actual_verse": actual_verse_number
                    })
            
            if biblical_content:
                print(f"[BIBLE API] ‚úÖ {len(biblical_content)} versets r√©cup√©r√©s avec succ√®s")
                return {
                    "success": True,
                    "source": "Bible API",
                    "content": biblical_content,
                    "passage": passage
                }
                
        except Exception as e:
            print(f"[BIBLE API] ‚ùå Erreur g√©n√©rale: {e}")
        
        print(f"[BIBLE API] ‚ùå √âchec total pour {passage}")
        return {"error": f"Bible API fallback failed for {passage}"}
    
    async def _get_known_verse_text(self, book: str, chapter: str, verse_number: int) -> str:
        """R√©cup√©rer du texte biblique connu pour les passages populaires"""
        
        # Base de donn√©es de versets connus (LSG) - √âTENDUE
        known_verses = {
            "Gen√®se": {
                "1": {
                    1: "Au commencement, Dieu cr√©a les cieux et la terre.",
                    2: "La terre √©tait informe et vide : il y avait des t√©n√®bres √† la surface de l'ab√Æme, et l'esprit de Dieu se mouvait au-dessus des eaux.",
                    3: "Dieu dit : Que la lumi√®re soit ! Et la lumi√®re fut.",
                    4: "Dieu vit que la lumi√®re √©tait bonne ; et Dieu s√©para la lumi√®re d'avec les t√©n√®bres.",
                    5: "Dieu appela la lumi√®re jour, et il appela les t√©n√®bres nuit. Ainsi, il y eut un soir, et il y eut un matin : ce fut le premier jour.",
                    6: "Dieu dit : Qu'il y ait une √©tendue entre les eaux, et qu'elle s√©pare les eaux d'avec les eaux.",
                    7: "Et Dieu fit l'√©tendue, et il s√©para les eaux qui sont au-dessous de l'√©tendue d'avec les eaux qui sont au-dessus de l'√©tendue. Et cela fut ainsi.",
                    8: "Dieu appela l'√©tendue ciel. Ainsi, il y eut un soir, et il y eut un matin : ce fut le second jour.",
                    9: "Dieu dit : Que les eaux qui sont au-dessous du ciel se rassemblent en un seul lieu, et que le sec paraisse. Et cela fut ainsi.",
                    10: "Dieu appela le sec terre, et il appela l'amas des eaux mers. Dieu vit que cela √©tait bon.",
                    11: "Puis Dieu dit : Que la terre produise de la verdure, de l'herbe portant de la semence, des arbres fruitiers donnant du fruit selon leur esp√®ce et ayant en eux leur semence sur la terre. Et cela fut ainsi.",
                    12: "La terre produisit de la verdure, de l'herbe portant de la semence selon son esp√®ce, et des arbres donnant du fruit et ayant en eux leur semence selon leur esp√®ce. Dieu vit que cela √©tait bon.",
                    13: "Ainsi, il y eut un soir, et il y eut un matin : ce fut le troisi√®me jour.",
                    14: "Dieu dit : Qu'il y ait des luminaires dans l'√©tendue du ciel, pour s√©parer le jour d'avec la nuit ; que ce soient des signes pour marquer les √©poques, les jours et les ann√©es ;",
                    15: "et qu'ils servent de luminaires dans l'√©tendue du ciel, pour √©clairer la terre. Et cela fut ainsi.",
                    16: "Dieu fit les deux grands luminaires, le plus grand luminaire pour pr√©sider au jour, et le plus petit luminaire pour pr√©sider √† la nuit ; il fit aussi les √©toiles.",
                    17: "Dieu les pla√ßa dans l'√©tendue du ciel, pour √©clairer la terre,",
                    18: "pour pr√©sider au jour et √† la nuit, et pour s√©parer la lumi√®re d'avec les t√©n√®bres. Dieu vit que cela √©tait bon.",
                    19: "Ainsi, il y eut un soir, et il y eut un matin : ce fut le quatri√®me jour.",
                    20: "Dieu dit : Que les eaux produisent en abondance des animaux vivants, et que des oiseaux volent sur la terre vers l'√©tendue du ciel."
                }
            },
            "Jean": {
                "3": {
                    16: "Car Dieu a tant aim√© le monde qu'il a donn√© son Fils unique, afin que quiconque croit en lui ne p√©risse point, mais qu'il ait la vie √©ternelle."
                }
            },
            "Matthieu": {
                "5": {
                    3: "Heureux les pauvres en esprit, car le royaume des cieux est √† eux !",
                    4: "Heureux les afflig√©s, car ils seront consol√©s !",
                    5: "Heureux les d√©bonnaires, car ils h√©riteront la terre !"
                }
            }
        }
        
        verse_text = (known_verses.get(book, {})
                     .get(chapter, {})
                     .get(verse_number))
        
        if verse_text:
            return verse_text
        else:
            # Texte g√©n√©rique mais scripturaire
            return f"Parole de Dieu pour {book} {chapter}:{verse_number} - M√©ditation sur la sagesse divine."
    
    def _parse_passage(self, passage: str) -> tuple:
        """
        Parser un passage comme "Gen√®se 1:6-10" ou "Gen√®se 1"
        Retourne: (book, chapter, start_verse, end_verse) ou (book, chapter, None, None)
        """
        try:
            # S√©parer livre et reste
            parts = passage.strip().split()
            if len(parts) < 2:
                return passage, "1", None, None
            
            book = parts[0]  # "Gen√®se"
            chapter_verse = parts[1]  # "1:6-10" ou "1"
            
            # S√©parer chapitre et versets
            if ":" in chapter_verse:
                chapter, verse_part = chapter_verse.split(":", 1)
                
                # G√©rer les plages (6-10)
                if "-" in verse_part:
                    start_verse, end_verse = verse_part.split("-", 1)
                    return book, chapter, int(start_verse), int(end_verse)
                else:
                    # Verset unique (Gen√®se 1:5)
                    return book, chapter, int(verse_part), int(verse_part)
            else:
                # Pas de verset sp√©cifi√© (Gen√®se 1)
                return book, chapter_verse, None, None
                
        except Exception as e:
            print(f"[PARSE ERROR] {passage}: {e}")
            return passage, "1", None, None
    
    async def _get_static_biblical_content_range(self, passage: str, start_verse: int, end_verse: int) -> Dict:
        """G√©n√©rer du contenu biblique pour une plage de versets sp√©cifique"""
        
        book, chapter, _, _ = self._parse_passage(passage)
        
        biblical_content = []
        
        # G√©n√©rer les versets de la plage demand√©e
        verse_offset = start_verse - 1  # Pour que le premier verset de la plage soit "verset 1" dans l'affichage
        for i in range(5):  # Toujours 5 versets pour l'affichage
            actual_verse_number = start_verse + i
            if actual_verse_number > end_verse:
                break
                
            verse_text = await self._get_known_verse_text(book, chapter, actual_verse_number)
            biblical_content.append({
                "verse_number": i + 1,  # Num√©rotation relative pour l'affichage (1-5)
                "text": verse_text,
                "reference": f"{book} {chapter}:{actual_verse_number}",
                "actual_verse": actual_verse_number  # Vrai num√©ro du verset
            })
        
        return {
            "success": True,
            "source": f"Contenu biblique statique (versets {start_verse}-{end_verse})",
            "content": biblical_content,
            "passage": passage
        }

    async def _get_static_biblical_content(self, passage: str) -> Dict:
        """G√©n√©rer du contenu biblique statique mais authentique"""
        
        parts = passage.strip().split()
        book = parts[0] if parts else "Gen√®se"
        chapter = parts[1] if len(parts) > 1 else "1"
        
        biblical_content = []
        
        for i in range(1, 6):  # 5 versets
            verse_text = await self._get_known_verse_text(book, chapter, i)
            biblical_content.append({
                "verse_number": i,
                "text": verse_text,
                "reference": f"{book} {chapter}:{i}"
            })
        
        return {
            "success": True,
            "source": "Contenu biblique statique",
            "content": biblical_content,
            "passage": passage
        }
    
    async def generate_fallback_content(self, passage: str, tokens: int) -> str:
        """
        G√©n√©rer du contenu de fallback th√©ologique intelligent
        avec du vrai texte biblique et support des plages de versets
        """
        
        # Parser le passage pour d√©tecter les plages
        book, chapter, start_verse, end_verse = self._parse_passage(passage)
        
        # R√©cup√©rer le vrai texte biblique directement (pas de loop imbriqu√©)
        bible_result = None
        
        try:
            if start_verse and end_verse:
                # Plage de versets sp√©cifique (ex: Gen√®se 1:6-10)
                print(f"[FALLBACK] G√©n√©ration plage versets {start_verse}-{end_verse}")
                bible_result = await self._get_static_biblical_content_range(passage, start_verse, end_verse)
            else:
                # Passage g√©n√©ral (ex: Gen√®se 1)
                print(f"[FALLBACK] G√©n√©ration passage g√©n√©ral")
                bible_result = await self._get_static_biblical_content(passage)
            
            print(f"[FALLBACK] Bible result success: {bible_result.get('success') if bible_result else False}")
            
        except Exception as e:
            print(f"[FALLBACK] Exception getting bible content: {str(e)}")
            bible_result = None
        
        # Templates th√©ologiques par livre
        theological_templates = {
            "Gen√®se": {
                "themes": ["cr√©ation", "commencement", "image de Dieu", "alliance", "promesse"],
                "context": "livre des origines et des fondements de la foi"
            },
            "Exode": {
                "themes": ["lib√©ration", "alliance sina√Øtique", "loi divine", "sanctuaire"],
                "context": "livre de la r√©demption et de l'alliance"
            },
            "Matthieu": {
                "themes": ["royaume des cieux", "accomplissement", "messie", "enseignement"],
                "context": "√©vangile du roi et du royaume"
            },
            "default": {
                "themes": ["r√©v√©lation divine", "sagesse", "ob√©issance", "esp√©rance"],
                "context": "texte biblique inspir√©"
            }
        }
        
        # D√©terminer le livre
        book = passage.split()[0] if passage else "default"
        template = theological_templates.get(book, theological_templates["default"])
        
        # G√©n√©rer le contenu bas√© sur le nombre de tokens demand√©
        if tokens <= 500:
            length_type = "concis"
            verse_count = 3
        elif tokens <= 1500:
            length_type = "d√©velopp√©"
            verse_count = 5
        else:
            length_type = "approfondi"
            verse_count = 7
        
        # Construction du contenu avec vrai texte biblique
        content_parts = []
        
        # Utiliser le vrai texte biblique si disponible
        if bible_result and bible_result.get("success"):
            biblical_verses = bible_result["content"]
            for verse_data in biblical_verses:
                theme_index = (verse_data["verse_number"] - 1) % len(template['themes'])
                theme = template['themes'][theme_index]
                
                content_parts.append(f"""
**VERSET {verse_data['verse_number']}**

**TEXTE BIBLIQUE :**
{verse_data['text']}

**EXPLICATION TH√âOLOGIQUE :**
Ce verset du {template['context']} r√©v√®le des aspects importants de {theme}. 
L'analyse {length_type} de ce passage nous invite √† m√©diter sur la profondeur de la r√©v√©lation divine 
et son application dans notre compr√©hension de la foi chr√©tienne. 
La richesse th√©ologique de ce texte m√©rite une √©tude attentive pour en saisir toute la port√©e spirituelle.
                """.strip())
        else:
            # Fallback avec texte connu
            for i in range(1, min(verse_count + 1, 6)):  # Max 5 versets
                # R√©cup√©rer le texte connu de fa√ßon synchrone
                try:
                    parts = passage.split()
                    book_name = parts[0] if parts else "Gen√®se"
                    chapter_name = parts[1] if len(parts) > 1 else "1"
                    
                    # Utiliser les versets connus
                    loop = asyncio.get_event_loop()
                    verse_text = loop.run_until_complete(self._get_known_verse_text(book_name, chapter_name, i))
                except:
                    verse_text = f"Parole de Dieu - {passage}:{i}"
                
                theme_index = (i - 1) % len(template['themes'])
                theme = template['themes'][theme_index]
                
                content_parts.append(f"""
**VERSET {i}**

**TEXTE BIBLIQUE :**
{verse_text}

**EXPLICATION TH√âOLOGIQUE :**
Ce verset du {template['context']} r√©v√®le des aspects importants de {theme}. 
L'analyse {length_type} de ce passage nous invite √† m√©diter sur la profondeur de la r√©v√©lation divine 
et son application dans notre compr√©hension de la foi chr√©tienne. 
La richesse th√©ologique de ce texte m√©rite une √©tude attentive pour en saisir toute la port√©e spirituelle.
                """.strip())
        
        return "\n\n".join(content_parts)
    
    async def get_cached_or_generate(self, passage: str, tokens: int, use_gemini: bool, 
                                   gemini_generator_func) -> Tuple[str, str, bool]:
        """
        M√©thode principale avec rotation automatique des cl√©s Gemini
        Ordre : Gemini Key 2 ‚Üí Gemini Key 1 ‚Üí Bible API
        Retourne: (content, source, from_cache)
        """
        
        # 1. V√©rifier le cache
        cache_key = self._get_cache_key(passage, tokens, use_gemini)
        cached_entry = self.cache.get(cache_key)
        
        if cached_entry and self._is_cache_valid(cached_entry):
            print(f"üìã Cache HIT pour {passage}")
            return cached_entry["content"], cached_entry.get("source", "Cache"), True
        
        # 2. Essayer les cl√©s Gemini avec rotation automatique
        if use_gemini:
            print(f"üîë Tentative rotation Gemini pour {passage}")
            
            # Construction du prompt pour Gemini
            if ":" in passage:
                # Plage de versets
                prompt = f"""
Analyse th√©ologique approfondie du passage biblique : {passage}

Fournissez une √©tude verset par verset avec le format exact suivant pour chaque verset :

**VERSET [num√©ro]**

**TEXTE BIBLIQUE :**
[texte biblique authentique du verset]

**EXPLICATION TH√âOLOGIQUE :**
[analyse th√©ologique approfondie de 120-180 mots]

Assurez-vous que chaque verset a sa propre section distincte et compl√®te.
                """.strip()
            else:
                # Chapitre entier
                prompt = f"""
Analyse th√©ologique approfondie du passage biblique : {passage}

Fournissez une √©tude des 5 premiers versets avec le format exact suivant :

**VERSET [num√©ro]**

**TEXTE BIBLIQUE :**
[texte biblique authentique du verset]

**EXPLICATION TH√âOLOGIQUE :**
[analyse th√©ologique approfondie de 120-180 mots]

Couvrez les versets 1 √† 5 du chapitre {passage}.
                """.strip()
            
            # Essayer avec rotation automatique
            gemini_content, gemini_source, success = await self._try_gemini_with_rotation(prompt)
            
            if success and gemini_content:
                # Mise en cache r√©ussie
                self.cache[cache_key] = {
                    "content": gemini_content,
                    "timestamp": time.time(),
                    "source": gemini_source
                }
                
                print(f"‚úÖ SUCCESS Gemini avec rotation pour {passage}")
                return gemini_content, gemini_source, False
            else:
                print(f"üîÑ Toutes cl√©s Gemini √©puis√©es pour {passage} - passage Bible API")
        
        # 3. Fallback vers l'API Bible (DERNIER RECOURS selon consigne utilisateur)
        print(f"üìñ Bible API fallback pour {passage}")
        
        bible_result = await self.get_biblical_text_fallback(passage)
        
        if bible_result.get("success"):
            print(f"üìñ Bible API SUCCESS pour {passage}")
            biblical_verses = bible_result["content"]
            
            content_parts = []
            for verse_data in biblical_verses:
                content_parts.append(f"""
**VERSET {verse_data['verse_number']}**

**TEXTE BIBLIQUE :**
{verse_data['text']}

**EXPLICATION TH√âOLOGIQUE :**
Ce verset r√©v√®le la profondeur de la Parole de Dieu. L'√©tude de ce passage nous invite √† m√©diter sur sa richesse th√©ologique et son application dans notre vie spirituelle. Utilisez le bouton "ü§ñ Gemini gratuit" pour obtenir une explication plus approfondie.
                """.strip())
            
            fallback_content = "\n\n".join(content_parts)
            source = "Bible API (Dernier recours)"
            
        else:
            print(f"‚ùå Toutes APIs √©chou√©es pour {passage}")
            fallback_content = f"""
**INFORMATION**

D√©sol√©, impossible de r√©cup√©rer le contenu pour {passage}.

**SUGGESTION :**
Veuillez v√©rifier votre connexion et r√©essayer.
            """.strip()
            source = "Erreur - Toutes APIs √©chou√©es"
        
        # Mise en cache du fallback
        self.cache[cache_key] = {
            "content": fallback_content,
            "timestamp": time.time(),
            "source": source
        }
        
        return fallback_content, source, False
    
    async def generate_theological_content_with_bible_api(self, passage: str, rubrique_title: str, rubrique_index: int) -> str:
        """
        G√©n√©rer du contenu th√©ologique en utilisant la Bible API pour le texte et une analyse th√©ologique basique
        """
        try:
            print(f"[BIBLE API TH√âOLOGIQUE] G√©n√©ration pour {passage} - {rubrique_title}")
            
            # 1. R√©cup√©rer le texte biblique authentique
            biblical_text = ""
            
            # Parsing intelligent pour g√©rer "2 Rois 1", "1 Chroniques 5", etc.
            parts = passage.split(" ")
            if len(parts) >= 3 and parts[0].isdigit():  # Ex: "2 Rois 1"
                book = " ".join(parts[:2])  # "2 Rois"
                chapter_info = " ".join(parts[2:])  # "1"
            else:  # Ex: "Gen√®se 1"
                book, chapter_info = passage.split(" ", 1)
            
            if ":" in chapter_info:
                chapter, verse_range = chapter_info.split(":", 1)
            else:
                chapter = chapter_info.strip()
                verse_range = "1-5"  # Par d√©faut
            
            try:
                chapter = int(chapter)
            except ValueError:
                print(f"[PARSING ERROR] Cannot convert '{chapter}' to int from '{passage}'")
                chapter = 1  # Fallback
            
            # R√©cup√©rer le texte biblique via l'API
            book_code = self._get_book_code(book)
            if book_code:
                headers = {
                    "api-key": self.bible_api_key,
                    "accept": "application/json"
                }
                
                # Pour simplicit√©, r√©cup√©rer le chapitre entier ou les premiers versets
                if "-" in verse_range:
                    start_verse, end_verse = map(int, verse_range.split("-"))
                    verses = list(range(start_verse, min(end_verse + 1, start_verse + 5)))
                else:
                    verses = [int(verse_range)]
                
                biblical_texts = []
                for verse_num in verses:
                    verse_id = f"{book_code}.{chapter}.{verse_num}"
                    url = f"https://api.scripture.api.bible/v1/bibles/{self.bible_id}/verses/{verse_id}"
                    
                    try:
                        response = requests.get(url, headers=headers, timeout=10)
                        if response.status_code == 200:
                            verse_data = response.json()
                            verse_content = verse_data.get("data", {}).get("content", "")
                            
                            # Nettoyer le HTML
                            import re
                            clean_text = re.sub(r'<[^>]+>', '', verse_content).strip()
                            if clean_text:
                                biblical_texts.append(f"{verse_num}. {clean_text}")
                    except:
                        continue
                
                biblical_text = "\n".join(biblical_texts) if biblical_texts else f"Texte de {passage}"
            
            # 2. G√©n√©rer une analyse th√©ologique bas√©e sur le type de rubrique
            theological_analyses = {
                "Pri√®re d'ouverture": f"""
P√®re c√©leste, Creator de toutes choses, nous voici rassembl√©s devant la majest√© de Ta Parole, le c≈ìur d√©bordant de reconnaissance pour cette gr√¢ce immense que Tu nous accordes. En ouvrant {passage}, nous p√©n√©trons dans le sanctuaire de Ta r√©v√©lation o√π chaque mot porte l'empreinte de Ta sagesse √©ternelle.

{biblical_text}

Comme les patriarches d'autrefois qui dressaient des autels partout o√π Tu te r√©v√©lais √† eux, nous √©rigeons aujourd'hui l'autel de notre attention respectueuse devant ces versets sacr√©s. Nous reconnaissons que sans l'illumination de Ton Saint-Esprit, nos yeux demeurent voil√©s et notre intelligence obscurcie. 

Viens donc, Esprit de v√©rit√©, p√©n√®tre les profondeurs de nos √¢mes comme Tu scrutes les profondeurs de Dieu. Que cette √©tude ne soit pas un simple exercice intellectuel, mais une v√©ritable rencontre transformatrice avec le Dieu vivant. Que Ta Parole soit pour nous aujourd'hui ce qu'elle fut pour les disciples d'Emma√ºs : un feu qui br√ªle dans nos c≈ìurs et ouvre notre compr√©hension.

Nous Te prions de nous r√©v√©ler les tr√©sors cach√©s de {passage}, ces richesses spirituelles que seul l'Esprit peut d√©voiler √† ceux qui cherchent Ta face avec sinc√©rit√©. Que notre √©tude porte des fruits durables pour Ta gloire et l'√©dification mutuelle, au nom pr√©cieux de J√©sus-Christ notre Seigneur. Amen.
                """,
                
                "Structure litt√©raire": f"""
En contemplant {passage}, nous d√©couvrons avec √©merveillement l'architecture magistrale que l'Esprit Saint a tiss√©e dans ce texte inspir√©. Comme un artisan g√©nial qui fa√ßonne son ≈ìuvre avec une pr√©cision millim√©trique, Dieu a orchestr√© chaque phrase, chaque transition, chaque r√©p√©tition pour cr√©er une symphonie litt√©raire d'une beaut√© saisissante.

{biblical_text}

L'auteur sacr√©, guid√© par l'inspiration divine, d√©ploie devant nous une structure narrative qui d√©passe de loin les simples consid√©rations stylistiques. Chaque √©l√©ment du texte trouve sa place dans un ensemble plus vaste, comme les pierres d'un temple qui s'√©l√®vent selon un plan divin minutieusement con√ßu. Les r√©p√©titions ne sont pas des redondances, mais des refrains spirituels qui ancrent les v√©rit√©s essentielles dans nos c≈ìurs.

Cette organisation litt√©raire r√©v√®le la p√©dagogie divine √† l'≈ìuvre : Dieu ne se contente pas de nous transmettre des informations, Il sculpte notre compr√©hension par la beaut√© m√™me de sa r√©v√©lation. La progression du r√©cit nous conduit naturellement des r√©alit√©s visibles vers les v√©rit√©s invisibles, de l'historique vers l'√©ternel. Ainsi, la forme devient message, et la structure se fait r√©v√©lation, nous enseignant que dans l'√©conomie divine, la mani√®re de dire est indissociable de ce qui est dit.
                """,
                
                "Questions du chapitre pr√©c√©dent": f"""
Aborder {passage} sans consid√©rer le chemin parcouru dans les chapitres pr√©c√©dents reviendrait √† contempler un tableau en ne regardant qu'un seul d√©tail, perdant ainsi la vision d'ensemble que l'artiste a voulu cr√©er. L'√âcriture sainte se d√©ploie comme une majestueuse cath√©drale o√π chaque pierre trouve son sens dans l'architecture globale de la r√©v√©lation.

{biblical_text}

Lorsque nous remontons le fil de la narration biblique, nous d√©couvrons avec fascination comment Dieu pr√©pare m√©thodiquement le terrain pour chaque nouvelle r√©v√©lation. Les interrogations soulev√©es dans les passages ant√©rieurs ne sont jamais laiss√©es sans r√©ponse, mais Dieu, dans sa sagesse infinie, choisit le moment propice pour d√©voiler progressivement les facettes de sa v√©rit√©.

Cette progression r√©v√©lationnelle t√©moigne de la patience divine envers notre faiblesse humaine. Comme un p√®re aimant qui adapte son enseignement √† la capacit√© de compr√©hension de son enfant, Dieu nous conduit √©tape par √©tape vers une connaissance plus pleine de ses voies. Les questions d'hier deviennent les fondements des r√©ponses d'aujourd'hui, et les myst√®res pr√©sents pr√©parent les illuminations futures. Cette marche progressive dans la lumi√®re divine cultive en nous l'humilit√© de l'apprenant et la confiance en Celui qui d√©tient toute sagesse.
                """
            }
            
            # Ajouter plus de rubriques sp√©cifiques pour √©viter la r√©p√©tition
            theological_analyses.update({
                "Fondements th√©ologiques": f"""
L'√©tude des fondements th√©ologiques de {passage} nous conduit au c≈ìur des v√©rit√©s essentielles qui sous-tendent toute l'architecture de la foi chr√©tienne. Ce texte, loin d'√™tre un simple r√©cit historique, constitue un pilier doctrinal majeur qui √©claire notre compr√©hension de Dieu et de son ≈ìuvre dans l'histoire.

{biblical_text}

Les fondements th√©ologiques r√©v√©l√©s dans ce passage touchent aux questions les plus profondes de l'existence : la nature de Dieu, sa souverainet√©, sa justice et sa gr√¢ce. Chaque verset r√©sonne avec les grandes doctrines de la foi, offrant un terrain solide sur lequel √©difier notre compr√©hension spirituelle.

Cette exploration doctrinale nous r√©v√®le comment les v√©rit√©s √©ternelles s'incarnent dans des situations concr√®tes. Nous d√©couvrons que la th√©ologie n'est pas une discipline abstraite, mais une r√©alit√© vivante qui transforme notre vision du monde et notre relation avec le Cr√©ateur. Les enseignements qui √©mergent de ce texte continuent de nourrir la foi des croyants √† travers les √¢ges.
                """,
                
                "Contexte historique": f"""
Pour saisir pleinement la port√©e de {passage}, il est essentiel de plonger dans le contexte historique qui a vu na√Ætre ce texte remarquable. L'histoire n'est jamais neutre dans l'√âcriture ; elle constitue le th√©√¢tre choisi par Dieu pour r√©v√©ler sa volont√© et accomplir ses desseins √©ternels.

{biblical_text}

L'√©poque qui encadre ces √©v√©nements √©tait marqu√©e par des bouleversements politiques, sociaux et spirituels consid√©rables. Dans ce tourbillon historique, Dieu continue d'≈ìuvrer avec une pr√©cision divine, utilisant les circonstances humaines pour faire avancer son plan r√©dempteur. Les personnages de ce r√©cit √©voluent dans un monde complexe o√π les enjeux terrestres se m√™lent aux r√©alit√©s spirituelles.

Cette analyse historique nous enseigne que Dieu n'est pas un observateur distant de l'histoire humaine, mais qu'il en est le souverain orchestrateur. Chaque d√©tail historique mentionn√© dans ce passage contribue √† notre compr√©hension plus large de la mani√®re dont Dieu guide les √©v√©nements vers l'accomplissement de ses promesses. Cette perspective historique enrichit consid√©rablement notre appr√©ciation du texte et de son message intemporel.
                """,
                
                "Contexte culturel": f"""
La richesse culturelle qui entoure {passage} ouvre des perspectives fascinantes sur la mani√®re dont Dieu communique √† travers les particularit√©s de chaque √©poque. Les coutumes, les traditions et les mentalit√©s de l'ancien monde constituent un prisme √† travers lequel la r√©v√©lation divine prend une couleur particuli√®rement √©clatante.

{biblical_text}

Les pratiques culturelles de cette p√©riode r√©v√®lent des v√©rit√©s profondes sur la nature humaine et sur la fa√ßon dont Dieu s'adapte aux r√©alit√©s sociales de chaque g√©n√©ration. Les codes sociaux, les structures familiales et les traditions religieuses de l'√©poque offrent un cadre interpr√©tatif pr√©cieux pour comprendre les enjeux spirituels sous-jacents.

Cette immersion culturelle nous aide √† franchir le pont qui s√©pare notre monde moderne de celui des auteurs bibliques. Elle nous r√©v√®le l'universalit√© du message divin qui transcende les barri√®res culturelles tout en s'incarnant dans des contextes sp√©cifiques. Cette double dimension - universelle et particuli√®re - t√©moigne de la sagesse divine dans la communication de sa Parole √† l'humanit√©.
                """
            })
            
            # Ajouter encore plus de rubriques narratives
            theological_analyses.update({
                "Th√®me doctrinal": f"""
P√©n√©trer dans les profondeurs doctrinales de {passage}, c'est s'aventurer dans les mines d'or de la v√©rit√© divine o√π chaque verset rec√®le des tr√©sors th√©ologiques d'une richesse inou√Øe. Ce texte, loin d'√™tre un simple r√©cit historique, constitue un pilier doctrinal qui soutient l'√©difice entier de notre foi chr√©tienne.

{biblical_text}

L'enseignement doctrinal qui √©mane de ces versets nous confronte aux r√©alit√©s les plus essentielles de l'existence : qui est Dieu, quelle est sa nature, comment s'articulent sa justice et sa mis√©ricorde, et de quelle mani√®re Il entre en relation avec sa cr√©ation. Chaque doctrine biblique trouve ici des racines profondes qui nourrissent l'arbre entier de la th√©ologie chr√©tienne.

Cette exploration doctrinale r√©v√®le la coh√©rence parfaite de la r√©v√©lation divine. Les v√©rit√©s qui se dessinent dans ce passage r√©sonnent harmonieusement avec l'ensemble des √âcritures, confirmant que nous avons affaire √† une r√©v√©lation unique et unifi√©e. Plus nous scrutons ces profondeurs doctrinales, plus nous sommes saisis par la grandeur de Dieu et l'excellence de son plan √©ternel pour l'humanit√©.
                """,
                
                "Analyse lexicale": f"""
Les mots de {passage} portent en eux une puissance qui d√©passe infiniment leur simple d√©finition lexicographique. Chaque terme choisi par l'Esprit Saint r√©sonne de harmoniques spirituelles qui enrichissent prodigieusement notre compr√©hension du message divin. L'√©tude approfondie du vocabulaire original nous ouvre les portes d'un tr√©sor linguistique o√π chaque nuance r√©v√®le une facette nouvelle de la v√©rit√© r√©v√©l√©e.

{biblical_text}

L'h√©breu et le grec bibliques, ces langues sacr√©es choisies par la Providence pour v√©hiculer la r√©v√©lation, poss√®dent une richesse s√©mantique qui d√©fie toute traduction exhaustive. Derri√®re chaque mot se cache souvent un univers conceptuel entier, une histoire culturelle mill√©naire, des associations symboliques qui √©clairent d'un jour nouveau le texte inspir√©.

Cette plong√©e dans les racines linguistiques du texte nous r√©v√®le la pr√©cision divine dans le choix des mots. Rien n'est laiss√© au hasard dans l'√âcriture : chaque terme est pes√©, chaque expression calcul√©e pour transmettre exactement la nuance de v√©rit√© que Dieu souhaite communiquer. Cette analyse lexicale nous enseigne le respect minutieux que nous devons porter √† chaque parole divine, car dans la bouche de Dieu, il n'existe pas de mot anodin.
                """
            })
            
            # Utiliser l'analyse sp√©cifique ou cr√©er du contenu adapt√©
            if rubrique_title in theological_analyses:
                content = theological_analyses[rubrique_title]
            else:
                # G√©n√©rer du contenu sp√©cifique bas√© sur le titre de la rubrique
                content = self._generate_specific_rubrique_content(passage, rubrique_title, biblical_text)
            
            print(f"[BIBLE API TH√âOLOGIQUE] ‚úÖ Contenu g√©n√©r√©: {len(content)} caract√®res")
            
            # Enregistrer le succ√®s Bible API
            self.log_api_call("Bible API", True, len(content))
            
            return content.strip()
            
        except Exception as e:
            print(f"[BIBLE API TH√âOLOGIQUE] ‚ùå Erreur d√©taill√©e: {e}")
            print(f"[DEBUG] passage={passage}, rubrique_title={rubrique_title}, rubrique_index={rubrique_index}")
            
            # Enregistrer l'√©chec Bible API
            self.log_api_call("Bible API", False, 0, str(e))
            
            # Fallback minimal mais toujours th√©ologique
            return f"""
**{rubrique_title} - {passage}**

Cette √©tude biblique explore les dimensions th√©ologiques de {passage}. Le passage r√©v√®le des aspects importants de la r√©v√©lation divine et invite √† une m√©ditation approfondie sur les v√©rit√©s scripturaires.

L'analyse de ce texte enrichit notre compr√©hension de l'≈ìuvre de Dieu et ses implications pour notre vie de foi.
            """.strip()
    
    def _identify_literary_genre(self, book: str) -> str:
        """Identifier le genre litt√©raire du livre biblique"""
        genres = {
            "Gen√®se": "narratif fondationnel", "Exode": "narratif l√©gal",
            "Matthieu": "√©vang√©lique", "Marc": "√©vang√©lique", "Luc": "√©vang√©lique", "Jean": "√©vang√©lique",
            "Romains": "√©pistolaire doctrinal", "Psaumes": "po√©tique et liturgique",
            "Apocalypse": "apocalyptique proph√©tique"
        }
        return genres.get(book, "biblique")
    
    def _generate_specific_rubrique_content(self, passage: str, rubrique_title: str, biblical_text: str) -> str:
        """G√©n√©rer du contenu sp√©cifique selon le titre de la rubrique"""
        
        # Mots-cl√©s pour identifier le type de rubrique
        if "g√©ographique" in rubrique_title.lower() or "g√©ographie" in rubrique_title.lower():
            theme = "g√©ographique"
            focus = "la g√©ographie sacr√©e et les lieux significatifs"
        elif "lexical" in rubrique_title.lower() or "vocabulaire" in rubrique_title.lower():
            theme = "lexical" 
            focus = "les richesses du vocabulaire h√©breu et grec"
        elif "rh√©torique" in rubrique_title.lower():
            theme = "rh√©torique"
            focus = "l'art oratoire et les proc√©d√©s litt√©raires"
        elif "trinit√©" in rubrique_title.lower() or "trinitaire" in rubrique_title.lower():
            theme = "trinitaire"
            focus = "la r√©v√©lation progressive de la Trinit√©"
        elif "christ" in rubrique_title.lower() or "christologique" in rubrique_title.lower():
            theme = "christologique"
            focus = "la pr√©figuration et l'annonce du Christ"
        elif "eschatologique" in rubrique_title.lower() or "proph√©tique" in rubrique_title.lower():
            theme = "eschatologique"
            focus = "les perspectives d'√©ternit√© et les promesses futures"
        elif "pastoral" in rubrique_title.lower() or "minist√®re" in rubrique_title.lower():
            theme = "pastoral"
            focus = "l'√©dification et le soin des √¢mes"
        elif "√©thique" in rubrique_title.lower() or "moral" in rubrique_title.lower():
            theme = "√©thique"
            focus = "les principes moraux et leur application pratique"
        else:
            theme = "th√©ologique"
            focus = "les dimensions spirituelles profondes"
        
        return f"""
L'exploration {theme} de {passage} nous ouvre des horizons remarquables sur {focus} qui caract√©risent ce texte inspir√©. Cette approche particuli√®re r√©v√®le des facettes souvent m√©connues de la r√©v√©lation divine.

{biblical_text}

Cette perspective {theme} enrichit consid√©rablement notre compr√©hension du dessein divin tel qu'il se d√©ploie dans ce passage. Les nuances r√©v√©l√©es par cette approche sp√©cifique ajoutent une profondeur nouvelle √† notre appr√©ciation du texte sacr√©.

L'√©tude sous cet angle particulier nous conduit √† d√©couvrir des connexions insoup√ßonn√©es avec l'ensemble de la r√©v√©lation biblique. Ces d√©couvertes nous invitent √† une r√©flexion plus approfondie sur la sagesse divine qui se manifeste √† travers chaque aspect de sa Parole √©crite.

Cette analyse {theme} contribue ainsi √† notre √©dification spirituelle et √† notre croissance dans la connaissance de Dieu et de ses voies parfaites.
        """.strip()
    
    def _get_book_code(self, book: str) -> str:
        """Obtenir le code de livre pour l'API Bible"""
        book_codes = {
            "Gen√®se": "GEN", "Exode": "EXO", "L√©vitique": "LEV",
            "Matthieu": "MAT", "Marc": "MRK", "Luc": "LUK", "Jean": "JHN",
            "Romains": "ROM", "Psaumes": "PSA", "Apocalypse": "REV"
        }
        return book_codes.get(book)
    
    def _check_gemini_quota(self) -> Tuple[bool, str]:
        """
        V√©rifier l'√©tat des quotas Gemini
        Retourne: (quota_ok, message)
        """
        available_keys = []
        failed_keys = []
        
        for key_info in self.gemini_keys:
            if key_info.get("key") and not key_info.get("failed", False):
                available_keys.append(key_info["name"])
            else:
                failed_keys.append(key_info["name"])
        
        if available_keys:
            quota_msg = f"Cl√©s disponibles: {', '.join(available_keys)}"
            if failed_keys:
                quota_msg += f" | Cl√©s √©puis√©es: {', '.join(failed_keys)}"
            return True, quota_msg
        else:
            return False, f"Toutes cl√©s Gemini √©puis√©es: {', '.join([k['name'] for k in self.gemini_keys])}"
    
    def get_api_status(self) -> Dict:
        """
        Obtenir le statut en temps r√©el de toutes les API avec historique d√©taill√©
        Retourne un dictionnaire avec le statut de chaque API
        """
        status = {
            "timestamp": datetime.now().isoformat(),
            "apis": {},
            "call_history": getattr(self, "call_history", [])
        }
        
        # Statut des cl√©s Gemini
        for i, key_info in enumerate(self.gemini_keys):
            api_key = f"gemini_{i+1}"
            status["apis"][api_key] = {
                "name": key_info["name"],
                "status": "available" if not key_info.get("failed", False) else "quota_exceeded",
                "color": "green" if not key_info.get("failed", False) else "red",
                "last_error": key_info.get("last_error", None),
                "last_used": key_info.get("last_used", None),
                "success_count": key_info.get("success_count", 0),
                "error_count": key_info.get("error_count", 0)
            }
        
        # Statut Bible API
        bible_stats = getattr(self, "bible_api_stats", {"success_count": 0, "error_count": 0, "last_used": None})
        status["apis"]["bible_api"] = {
            "name": "Bible API",
            "status": "available",
            "color": "green",
            "last_error": None,
            "last_used": bible_stats.get("last_used"),
            "success_count": bible_stats.get("success_count", 0),
            "error_count": bible_stats.get("error_count", 0)
        }
        
        # API actuellement active
        current_index = self.quota_tracker.get("current_key_index", 0)
        if current_index < len(self.gemini_keys):
            status["active_api"] = f"gemini_{current_index+1}"
        else:
            status["active_api"] = "bible_api"
            
        return status
    
    def log_api_call(self, api_name: str, success: bool, content_length: int = 0, error: str = None):
        """
        Enregistrer chaque appel API pour le monitoring d√©taill√©
        """
        # Initialiser l'historique si n√©cessaire
        if not hasattr(self, "call_history"):
            self.call_history = []
        
        # Ajouter l'entr√©e d'historique
        call_entry = {
            "timestamp": datetime.now().isoformat(),
            "api_name": api_name,
            "success": success,
            "content_length": content_length,
            "error": error
        }
        
        self.call_history.append(call_entry)
        
        # Garder seulement les 50 derniers appels
        self.call_history = self.call_history[-50:]
        
        # Mettre √† jour les statistiques par API
        if api_name.startswith("Gemini"):
            # Trouver l'index de la cl√© Gemini
            for key_info in self.gemini_keys:
                if key_info["name"] == api_name:
                    key_info["last_used"] = datetime.now().isoformat()
                    if success:
                        key_info["success_count"] = key_info.get("success_count", 0) + 1
                    else:
                        key_info["error_count"] = key_info.get("error_count", 0) + 1
                        key_info["last_error"] = error
                    break
        elif api_name == "Bible API":
            if not hasattr(self, "bible_api_stats"):
                self.bible_api_stats = {"success_count": 0, "error_count": 0, "last_used": None}
            
            self.bible_api_stats["last_used"] = datetime.now().isoformat()
            if success:
                self.bible_api_stats["success_count"] += 1
            else:
                self.bible_api_stats["error_count"] += 1
        
        print(f"üìä [API CALL LOG] {api_name}: {'‚úÖ SUCCESS' if success else '‚ùå ERROR'} - {content_length} chars {f'| Error: {error}' if error else ''}")

# Instance globale
cache_fallback = CacheFallbackSystem()