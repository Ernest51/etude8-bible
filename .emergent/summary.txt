<analysis>
The trajectory details an extensive development and debugging process for a full-stack Bible study application. The initial work focused on fixing critical deployment discrepancies between the local preview and Vercel, caused by incorrect API URLs and Vercel configuration issues. A major architectural shift involved migrating the backend's LLM functionality from a paid Emergent Universal Key to the user's personal, free Gemini API key. This required a complete refactoring of the  file, removing dependencies on a proprietary library and integrating the official Google Gemini SDK.

Subsequent efforts revolved around UI/UX enhancements and bug fixes reported by the user. A significant challenge was restoring a modern CSS design (specific violet, blue, and orange colors) for the verse-by-verse study, which involved deep debugging of the  function in , its regex patterns, and the exact string format generated by the backend. The AI also implemented user-requested features like improved button styling, auto-saving notes, and a fully responsive mobile layout using CSS media queries. A recurring theme was the brittle deployment process, requiring constant manual file synchronization () to the Vercel directory, which culminated in the AI instructing the user on the proper CI/CD workflow via GitHub integration.
</analysis>

<product_requirements>
The goal is to build and maintain a dual-mode Bible study application.

**Core Functionality:**
1.  **Verse-by-Verse Study (verset par verset):** The primary mode allows users to select a Bible passage (book, chapter, verse) and receive a detailed theological explanation generated by an AI.
2.  **Rubriques Study:** A secondary study mode for Rubriques 1-28.
3.  **AI Integration:** Use Google's Gemini model for generating theological content. The system must use the user's personal, free API key to avoid recurring costs.
4.  **Notes Feature:** A Prise de Note modal where users can write and store notes, which must be saved automatically and persistently.
5.  **Bible Concordance:** A feature to search for terms within the Bible.

**UI/UX Requirements:**
1.  **Modern Design:** The application must have a modern, visually appealing interface. Specifically, the verset par verset output must be styled with a distinct color scheme: violet for verse headers, blue for Texte Biblique labels, and orange for Explication Th√©ologique labels.
2.  **Harmonized Controls:** All primary action buttons must share a consistent and modern design aesthetic.
3.  **Mobile Responsiveness:** The application must be fully functional and easy to use on mobile devices. The layout should adapt to smaller screens, with generated content being prioritized and displayed full-width for readability. The Welcome message should be hidden on mobile.
</product_requirements>

<key_technical_concepts>
- **Full-Stack Architecture**: React frontend () and a Python FastAPI backend.
- **AI Integration**: Direct integration with Google Gemini API via the  Python library, using a personal API key stored in an environment variable.
- **Deployment**: Deployed on Vercel, with a recurring critical issue requiring manual file synchronization from  to  to bypass caching and build problems.
- **Styling**: Standard CSS with media queries for mobile responsiveness.
- **State Management**: React hooks (, ) for managing UI state and user selections.
- **Local Persistence**:  is used for the Prise de Note feature.
</key_technical_concepts>

<code_architecture>
The application follows a standard monorepo structure with a separate frontend and backend. However, due to persistent Vercel deployment issues, a flattened copy of the frontend source is maintained in the root  directory, which is the actual build target for Vercel.

**Directory Structure:**


- ****
    - **Importance**: This file contains the entire FastAPI backend logic. It defines the API endpoints, primarily , which communicates with the Google Gemini API to generate theological content.
    - **Changes**: This file underwent a major refactoring. It was initially built with a proprietary  library. This was completely removed and replaced with the official  library. The logic was updated to read the  from the  file and use it to call the Gemini model. The prompt sent to the model was also refined to ensure it produced a consistent Markdown-like output (, etc.) required by the frontend for styling.

- ****
    - **Importance**: This is the main component for the entire React application, containing all UI logic, state management, and API calls.
    - **Changes**:
        - **API Key Logic**: The  function was modified to call the backend, ensuring it uses the user's free Gemini key.
        - **Endpoint URL Logic**: A conditional check was added to  to switch between  for local development and the production URL on Vercel.
        - **Styling Logic ()**: This function was heavily modified. It uses complex regex to parse the backend's string output and wrap parts of it in HTML tags with specific CSS classes (, , etc.). The regex was made more flexible to handle different text formats from different APIs ( vs. ).
        - **Notes Functionality**: The  logic was updated to save notes to  on every keystroke () for an auto-save experience.
        - **Mobile Responsiveness**: A  class was added to the welcome message container to allow it to be hidden via CSS on mobile.

- ****
    - **Importance**: Contains all the styling for the application.
    - **Changes**:
        - **Verse Styling**: Contains the critical styles for  (violet),  (blue), and  (orange). These were restored from a backup to fix the design.
        - **Button Harmonization**: All button styles (, , etc.) were refactored to share a common, modern aesthetic with consistent sizing, fonts, and hover effects.
        - **Mobile Responsiveness**: A  block was added at the end of the file. This media query rearranges the main layout for mobile (controls on top, content on bottom), sets the content area to full-width, and hides elements with the  class.

- ****
    - **Importance**: These files are direct copies of their  counterparts and are the source for Vercel deployments.
    - **Changes**: They were repeatedly overwritten using  commands to force Vercel to pick up the latest changes from the development directory.
</code_architecture>

<pending_tasks>
- **Establish a Proper CI/CD Pipeline**: The user's primary unresolved issue is the disconnect between their local development, their GitHub repository, and the Vercel deployment. The immediate pending task is for the user to use the Save to GitHub feature to establish an automated deployment workflow and eliminate the need for manual file copying.
- **ESLint Configuration Fix**: The ESLint configuration was disabled to bypass build errors and needs to be properly fixed and re-enabled.
</pending_tasks>

<current_work>
The most recent work was a multi-stage UI and deployment workflow enhancement based on direct user feedback.

1.  **Mobile Responsiveness Implementation**: The user requested a mobile-specific layout. This was implemented by adding  queries to . These styles reorder the flex containers to place controls at the top and the main content area at the bottom, expanding it to full-width for readability. Additionally, the welcome message was wrapped in a div with a  class in , and this class was set to  within the mobile media query.

2.  **Deployment Workflow Resolution**: The user reported a persistent discrepancy between the  and the live Vercel URL (). The AI engineer correctly diagnosed that Vercel was deploying from the user's linked GitHub repository, which was out of sync with the local changes being made in the development environment. The AI explained this workflow and instructed the user on how to use the Save to GitHub feature to push the latest code, which would in turn trigger an automatic Vercel deployment.

3.  **Final Synchronization**: As a final immediate action to resolve the user's confusion and ensure the preview environment was up-to-date, the AI performed one last comprehensive manual synchronization, copying all files from  and the root configuration files (like , ) into the  directory and the root directory, respectively, and created a trigger file to force a Vercel redeployment.
</current_work>

<optional_next_step>
Guide the user to use the Save to GitHub feature to push all recent changes (including the mobile responsive updates) to their  repository, which will automatically trigger the Vercel deployment and resolve the synchronization issue.
</optional_next_step>
